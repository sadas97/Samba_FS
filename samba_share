#!/bin/bash

if [ "$EUID" == 0 ]; then

#Choose if the user wants to create a new share or only add permissins
    printf "Do you want to\n1 - create a new share\n2 - only add permissions\n"
    Reset=1
    while [ "${Reset}" == 1 ]; do
	read -p ">" ShareOrPermiss
	if [ "${ShareOrPermiss}" == 1 ] || [ "${ShareOrPermiss}" == 2 ]; then
	    Reset=0
	else
	    printf "Must enter 1 or 2\n"
	fi
    done

#If the user wants to create a share they are asked if they want to create a folder to share or 
#to share an existing one
    if [ "${ShareOrPermiss}" == 1 ]; then

	printf "Do you want to\n1 - make a new folder to share\n2 - share an existing folder\n"
	Reset=1
	while [ "${Reset}" == 1 ]; do
	    read -p ">" NewFolder
	    if [ "${NewFolder}" == 1 ] || [ "${NewFolder}" == 2 ]; then
		Reset=0
	    else
		printf "Must enter 1 or 2\n"
	    fi
	done
    fi

#Aksing for variables needef both for creating a share and adding permissins

    #Full path to the share folder
    printf "Enter the full path to the folder you want to share\n"
    while [ -z "${FolderPath}" ]; do
	read -p ">" FolderPath
	if [ -z "${FolderPath}" ]; then
	    printf "The path to the folder must not be empty\n"
	fi
    done

    #Name of the share
    printf "Enter the share name\n"
    while [ -z "${ShareName}" ]; do
	read -p ">" ShareName
	if [ -z "${ShareName}" ]; then
	    printf "The share name must not be empty\n"
	fi
    done

#Asking if the share is on a standalone samba or a domain member
    printf "Is your samba\n1 - a standalone server\n2 - a part of a domain\n"
    Reset=1
    while [ "${Reset}" == 1 ]; do
	read -p ">" SambaSetup
	if [ "${SambaSetup}" == 1 ]; then 
	    Reset=0
	elif [ "${SambaSetup}" == 2 ]; then
	    Reset=0
	    #If the samba is a domain member ask for NetBIOS domain name
	    printf "Enter the NetBIOS domain name [example.com -> EXAMPLE]\n"
	    while [ -z "${DomainName}" ]; do
		read -p ">" DomainName
		if [ -z "${DomainName}" ]; then
		    printf "The NetBIOS domain name must not be empty\n"
		fi
	    done

	else
	    printf "Must enter 1 or 2\n"
	fi
    done

#If the user chose to create a new folder to share, create that folder
    if [ "${NewFolder}" == 1 ]; then
	mkdir -p ${FolderPath}
    fi

#If a new share is being created, ask for its parameters
    if [ "${ShareOrPermiss}" == 1 ]; then
	attributes="[${ShareName}]\n	path = ${FolderPath}\n	inherit acls = yes"

	#Should the folder be read only?
	printf "\nDo you want the folder to be read only? If you choose yes not even users with\n"\
"write permission will be able to write! (y/n) \n"
	Reset=1
	while [ "${Reset}" == 1 ]; do
	    read -p ">" ReadOnly
	    if [ "${ReadOnly}" == y ]; then 
		Reset=0
		attributes="${attributes}\n	read only = yes"
	    elif [ "${ReadOnly}" == n ]; then
		Reset=0
		attributes="${attributes}\n	read only = no"
	    else
	    printf "Must enter y or n\n"
	    fi
	done

	#Should the share allow guest users?
	printf "\nDo you want to allow guest access? Guest users will only have read and execute\n"\
"permissions (y/n)\n"
	Reset=1
	while [ "${Reset}" == 1 ]; do
	    read -p ">" Guest
	    if [ "${Guest}" == y ]; then 
		Reset=0
 		attributes="${attributes}\n	guest ok = yes"
	    elif [ "${Guest}" == n ]; then
		Reset=0
		attributes="${attributes}\n	guest ok = no"
	    else
		printf "Must enter y or n\n"
	    fi
	done

#If it doesn't exist, create a folder for the share files
	if [ ! -d /etc/samba/share/ ]; then
	    mkdir -p /etc/samba/share/
	fi
#Create a config file of the share, include it in smb.conf and reload the smb configuration
	printf "${attributes}" > /etc/samba/share/${ShareName}
	printf "\ninclude = /etc/samba/share/${ShareName}" >> /etc/samba/smb.conf
	smbcontrol all reload-config
    fi

#If samba is a domain member setup default permissions
    if [ "${SambaSetup}" == 2 ]; then
	setfacl -m group::--- ${FolderPath}
	setfacl -m default:group::--- ${FolderPath}

	setfacl -m group:"${DomainName}\Domain Admins":rwx ${FolderPath}
	setfacl -m other::--- ${FolderPath}
	setfacl -m default:group:"${DomainName}\Domain Admins":rwx ${FolderPath}
	setfacl -m default:other::--- ${FolderPath}
	printf "The domain group Domain Admins has read, write and execute permissions\n"
    fi

#Ask if the user wants to add permissions (Only if they're creating a new share)
    if [ "${ShareOrPermiss}" == 1 ]; then
	printf "Do you want to add permissions? (y/n)\n"
	Reset=1
	while [ "${Reset}" == 1 ]; do
	    read -p ">" AddPerm
	    if [ "${AddPerm}" == y ] || [ "${AddPerm}" == n ]; then
		Reset=0
	    else
		printf "Must enter y or n\n"
	    fi
	done
    else
	AddPerm=y
    fi


    while [ "${AddPerm}" == y ]; do
	#Unset SecondPar if it is still set
	unset SecondPar
#Choose if the permission is for a user of a group
	printf "Do you want to add permissions for a user or a group (u/g)\n"
	Reset=1
	while [ "${Reset}" == 1 ]; do
	    read -p ">" AddUserOrGroup
	    if [ "${AddUserOrGroup}" == u ] || [ "${AddUserOrGroup}" == g ]; then
		Reset=0
	    else
		printf "Must enter u or g\n"
	    fi
	done

#If for a user, set FirstPar to 'user' and ask for a username
	if [ "${AddUserOrGroup}" == u ]; then
	    Reset=0
	    FirstPar=user
	    printf "Enter the username of the user you want to give permissions to\n"
	    while [ -z "${SecondPar}" ]; do
		read -p ">" SecondPar
		if [ -z "${SecondPar}" ]; then
		    printf "The username must not be empty\n"
		fi
	    done
#If samba is a standalone server add the username to the valid users parameter
	    if [ "${SambaSetup}" == 1 ]; then
		#find valid users parameter in the config file of the share
		existingValid=$(cat /etc/samba/share/${ShareName} | grep -w "valid users")
		#If it doens't exist create it and add the username
		if [ -z "${existingValid}" ]; then
		    printf "\n	valid users = ${SecondPar}" >> /etc/samba/share/${ShareName}
		else
		#If it exist copy the line and append the username
		    sed -i "s/${existingValid}//" /etc/samba/share/${ShareName}
		    printf "${existingValid} ${SecondPar}" >> /etc/samba/share/${ShareName}
		fi
		#Unset the existingValid variable so that it doesn't intervene if the user chooses to add another permission
		unset existingValid
	    fi

	elif [ "${AddUserOrGroup}" == g ]; then

	    Reset=0
	    FirstPar=group
	    printf "Enter the name of the group you want to give permissions to\n"
	    while [ -z "${SecondPar}" ]; do
		read -p ">" SecondPar
		if [ -z "${SecondPar}" ]; then
		    printf "The group name must not be empty\n"
		fi
	    done
#If samba is a standalone server add the groupname to the valid users parameter
	    if [ "${SambaSetup}" == 1 ]; then
		existingValid=$(cat /etc/samba/share/${ShareName} | grep -w "valid users")
		if [ -z "${existingValid}" ]; then
		    printf "\n	valid users = @${SecondPar}" >> /etc/samba/share/${ShareName}
		else
		    sed -i "s/${existingValid}//" /etc/samba/share/${ShareName}
		    printf "${existingValid} @${SecondPar}" >> /etc/samba/share/${ShareName}
		fi
		unset existingValid
	    fi

	fi
#Ask which permissions should the user/group have
	#Read permissions
	printf "\nDo you want the ${FirstPar} to have the read permission? (y/n)\n"
	Reset=1
	while [ "${Reset}" == 1 ]; do
	    read -p ">" Read
	    if [ "${Read}" == y ]; then 
		Reset=0
		Permission="r"
	    elif [ "${Read}" == n ]; then
		Reset=0
		Permission="-"
	    else
		printf "Must enter y or n\n"
	    fi
	done
	#Write permissions
	printf "\nDo you want the ${FirstPar} to have the the write permission? (y/n)\n"
	Reset=1
	while [ "${Reset}" == 1 ]; do
	    read -p ">" Write
	    if [ "${Write}" == y ]; then 
		Reset=0
		Permission="${Permission}w"
	    elif [ "${Write}" == n ]; then
		Reset=0
		Permission="${Permission}-"
	    else
		printf "Must enter y or n\n"
	    fi
	done

	#Execute permissions
	printf "\nDo you want the ${FirstPar} to have the the execute permission? (y/n)\n"
	Reset=1
	while [ "${Reset}" == 1 ]; do
	    read -p ">" Execute
	    if [ "${Execute}" == y ]; then 
		Reset=0
		Permission="${Permission}x"
	    elif [ "${Execute}" == n ]; then
		Reset=0
		Permission="${Permission}-"
	    else
		printf "Must enter y or n\n"
	    fi
	done

#If the samba is a domain member add a backslash to SecondPar which separates the domain name from the user/group name
	if [ "${SambaSetup}" == 2 ]; then
	    SecondPar="\\${SecondPar}"
	fi
#Set the permission
	setfacl -R -m "${FirstPar}":"${DomainName}${SecondPar}":"${Permission}" "${FolderPath}"
	setfacl -R -m default:"${FirstPar}":"${DomainName}${SecondPar}":"${Permission}" "${FolderPath}"

#Ask if the user wants to add another permission
	printf "Do you want to add permissions for another group or a user? (y/n)\n"
	Reset=1
	while [ "${Reset}" == 1 ]; do
	    read -p ">" ContinuePermission
	    if [ "${ContinuePermission}" == y ]; then 
		Reset=0
		AddPerm=y
	    elif [ "${ContinuePermission}" == n ]; then
		Reset=0
		AddPerm=n
	    else
		printf "Must enter y or n\n"
	    fi
	done
    done

else
    echo "Script must be run as root"
fi

exit 0
