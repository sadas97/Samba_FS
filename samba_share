#!/bin/bash

if [ "$EUID" == 0 ]; then
    source .lib_file

    printf "Do you want to\n1 - make a new folder to share\n2 - share an existing folder\n"
    Reset=1
    while [ "${Reset}" == 1 ]; do
	read -p ">" NewFolder
	if [ "${NewFolder}" == 1 ] || [ "${NewFolder}" == 2 ]; then
	    Reset=0
	else
	    printf "Must enter 1 or 2\n"
	fi
    done

    

    printf "Enter the full path to the folder you want to share\n"
    while [ -z "${FolderPath}" ]; do
	read -p ">" FolderPath
	if [ -z "${FolderPath}" ]; then
	    printf "The path to the folder must not be empty\n"
	fi
    done

    printf "Enter the share name\n"
    while [ -z "${ShareName}" ]; do
	read -p ">" ShareName
	if [ -z "${ShareName}" ]; then
	    printf "The share name must not be empty\n"
	fi
    done

    printf "Enter the NetBIOS domain name [example.com -> EXAMPLE]\n"
    while [ -z "${DomainName}" ]; do
	read -p ">" DomainName
	if [ -z "${DomainName}" ]; then
	    printf "The NetBIOS domain name must not be empty"
	fi
    done


    if [ "${NewFolder}" == 1 ]; then
	mkdir -p ${FolderPath}
    fi

    atributes="[${ShareName}]\n	path = ${FolderPath}\n	inherit acls = yes"

    printf "\nDo you want the folder to be read only? (y/n)\n"
    Reset=1
    while [ "${Reset}" == 1 ]; do
	read -p ">" ReadOnly
	if [ "${ReadOnly}" == y ]; then 
	    Reset=0
	    atributes="${atributes}\n	read only = yes"
	elif [ "${ReadOnly}" == n ]; then
	    Reset=0
	    atributes="${atributes}\n	read only = no"
	else
	    printf "Must enter y or n\n"
	fi
    done

    printf "\nDo you want the folder to be browsable? (y/n)\n"
    Reset=1
    while [ "${Reset}" == 1 ]; do
	read -p ">" Browsable
	if [ "${Browsable}" == y ]; then 
	    Reset=0
	    atributes="${atributes}\n	browsable = yes"
	elif [ "${Browsable}" == n ]; then
	    Reset=0
	    atributes="${atributes}\n	browsable = no"
	else
	    printf "Must enter y or n\n"
	fi
    done


    printf "${atributes}" >> /etc/samba/share/${ShareName}
    printf "\ninclude = /etc/samba/share/${ShareName}" >> /etc/samba/smb.conf
    smbcontrol all reload-config
 
    #setfacl -m group::--- ${FolderPath}
    #setfacl -m default:group::--- ${FolderPath}

    #setfacl -m group:"${DomainName}\Domain Admins":rwx ${FolderPath}
    #setfacl -m other::--- ${FolderPath}
    #setfacl -m default:group:"${DomainName}\Domain Admins":rwx ${FolderPath}
    #setfacl -m default:other::--- ${FolderPath}
    printf "The domain group Domain Admins has read, write and execute permissions\n"

    printf "Do you want to add permissions? (y/n)\n"
    Reset=1
    while [ "${Reset}" == 1 ]; do
	read -p ">" AddPerm
	if [ "${AddPerm}" == y ] || [ "${AddPerm}" == n ]; then
	    Reset=0
	    printf "Addperm is y"
	else
	    printf "Must enter y or n\n"
	fi
    done

    exit 0

    if [ "${AddPerm}" == y ]; then
	printf "Do you want to add permissions for a user or a group (u/g)"
	Reset=1
	while [ "${Reset}" == 1 ]; do
	    read -p ">" AddUserOrGroup
	    if [ "${AddUserOrGroup}" == u ]; then
		Reset=0
		FirstPar=user
		printf "Enter the username of the domain user you want to give permissions to\n"
		while [ -z "${PermissUser}" ]; do
		    read -p ">" PermissUser
		    if [ -z "${PermissUser}" ]; then
			printf "The username must not be empty"
		    fi
		done
	    elif [ "${AddUserOrGroup}" == g ]; then
		Reset=0
		FirstPar=group
		printf "Enter the name of the domain group you want to give permissions to\n"
		while [ -z "${PermissGroup}" ]; do
		    read -p ">" PermissGroup
		    if [ -z "${PermissGroup}" ]; then
			printf "The group name must not be empty"
		    fi
		done
	    else
		printf "Must enter u or g\n"
	    fi
	done
    fi


else
    echo "Script must be run as root"
fi

exit 0