#!/bin/bash

if [ "$EUID" == 0 ]; then
    source .lib_file

    printf "Do you want to\n1 - make a new folder to share\n2 - share an existing folder\n"
    Reset=1
    while [ "${Reset}" == 1 ]; do
	read -p ">" NewFolder
	if [ "${NewFolder}" == 1 ] || [ "${NewFolder}" == 2 ]; then
	    Reset=0
	else
	    printf "Must enter 1 or 2\n"
	fi
    done


    printf "Enter the full path to the folder you want to share\n"
    while [ -z "${FolderPath}" ]; do
	read -p ">" FolderPath
	if [ -z "${FolderPath}" ]; then
	    printf "The path to the folder must not be empty\n"
	fi
    done

    printf "Enter the share name\n"
    while [ -z "${ShareName}" ]; do
	read -p ">" ShareName
	if [ -z "${ShareName}" ]; then
	    printf "The share name must not be empty\n"
	fi
    done

    printf "Is your samba\n1 - a standalone server\n2 - a part of a domain\n"
    Reset=1
    while [ "${Reset}" == 1 ]; do
	read -p ">" SambaSetup
	if [ "${SambaSetup}" == 1 ]; then 
	    Reset=0
	elif [ "${SambaSetup}" == 2 ]; then
	    Reset=0

	    printf "Enter the NetBIOS domain name [example.com -> EXAMPLE]\n"
	    while [ -z "${DomainName}" ]; do
		read -p ">" DomainName
		if [ -z "${DomainName}" ]; then
		    printf "The NetBIOS domain name must not be empty\n"
		fi
	    done

	else
	    printf "Must enter 1 or 2\n"
	fi
    done


    if [ "${NewFolder}" == 1 ]; then
	mkdir -p ${FolderPath}
    fi

    atributes="[${ShareName}]\n	path = ${FolderPath}\n	inherit acls = yes"

    printf "\nDo you want the folder to be read only? If you choose yes not even users with\n"\
"write permission will be able to write! (y/n) \n"
    Reset=1
    while [ "${Reset}" == 1 ]; do
	read -p ">" ReadOnly
	if [ "${ReadOnly}" == y ]; then 
	    Reset=0
	    atributes="${atributes}\n	read only = yes"
	elif [ "${ReadOnly}" == n ]; then
	    Reset=0
	    atributes="${atributes}\n	read only = no"
	else
	    printf "Must enter y or n\n"
	fi
    done

    printf "\nDo you want the folder to be browsable? (y/n)\n"
    Reset=1
    while [ "${Reset}" == 1 ]; do
	read -p ">" Browsable
	if [ "${Browsable}" == y ]; then 
	    Reset=0
	    atributes="${atributes}\n	browsable = yes"
	elif [ "${Browsable}" == n ]; then
	    Reset=0
	    atributes="${atributes}\n	browsable = no"
	else
	    printf "Must enter y or n\n"
	fi
    done

    printf "\nDo you want to allow guest access? Guest users will only have read and execute\n"\
"permissions (y/n)\n"
    Reset=1
    while [ "${Reset}" == 1 ]; do
	read -p ">" Guest
	if [ "${Guest}" == y ]; then 
	    Reset=0
	    atributes="${atributes}\n	guest ok = yes"
	elif [ "${Guest}" == n ]; then
	    Reset=0
	    atributes="${atributes}\n	guest ok = no"
	else
	    printf "Must enter y or n\n"
	fi
    done

    mkdir -p /etc/samba/share/
    printf "${atributes}" > /etc/samba/share/${ShareName}
    printf "\ninclude = /etc/samba/share/${ShareName}" >> /etc/samba/smb.conf
    smbcontrol all reload-config

    if [ "${SambaSetup}" == 2 ]; then
	setfacl -m group::--- ${FolderPath}
	setfacl -m default:group::--- ${FolderPath}

	setfacl -m group:"${DomainName}\Domain Admins":rwx ${FolderPath}
	setfacl -m other::--- ${FolderPath}
	setfacl -m default:group:"${DomainName}\Domain Admins":rwx ${FolderPath}
	setfacl -m default:other::--- ${FolderPath}
	printf "The domain group Domain Admins has read, write and execute permissions\n"
    fi

    printf "Do you want to add permissions? (y/n)\n"
    Reset=1
    while [ "${Reset}" == 1 ]; do
	read -p ">" AddPerm
	if [ "${AddPerm}" == y ] || [ "${AddPerm}" == n ]; then
	    Reset=0
	else
	    printf "Must enter y or n\n"
	fi
    done



    while [ "${AddPerm}" == y ]; do
	unset SecondPar
	printf "Do you want to add permissions for a user or a group (u/g)\n"
	Reset=1
	while [ "${Reset}" == 1 ]; do
	    read -p ">" AddUserOrGroup
	    if [ "${AddUserOrGroup}" == u ] || [ "${AddUserOrGroup}" == g ]; then
		Reset=0
	    else
		printf "Must enter u or g\n"
	    fi
	done

	if [ "${AddUserOrGroup}" == u ]; then
	    Reset=0
	    FirstPar=user
	    printf "Enter the username of the user you want to give permissions to\n"
	    while [ -z "${SecondPar}" ]; do
	        read -p ">" SecondPar
		if [ -z "${SecondPar}" ]; then
		    printf "The username must not be empty\n"
		fi
	    done

	    if [ "${SambaSetup}" == 2 ]; then
		existingValid=$(cat /etc/samba/share/${ShareName} | grep -w "valid users")
		if [ -z "${existingValid}" ]; then
		    printf "\n	valid users = ${SecondPar}" >> /etc/samba/share/${ShareName}
		else
		    sed -i "s/${existingValid}//" /etc/samba/share/${ShareName}
		    printf "${existingValid} ${SecondPar}" >> /etc/samba/share/${ShareName}
		fi
		unset existingValid
	    fi

	elif [ "${AddUserOrGroup}" == g ]; then

	    Reset=0
	    FirstPar=group
	    printf "Enter the name of the group you want to give permissions to\n"
	    while [ -z "${SecondPar}" ]; do
		read -p ">" SecondPar
		if [ -z "${SecondPar}" ]; then
		    printf "The group name must not be empty\n"
		fi
	    done

	    if [ "${SambaSetup}" == 2 ]; then
		existingValid=$(cat /etc/samba/share/${ShareName} | grep -w "valid users")
		if [ -z "${existingValid}" ]; then
		    printf "\n	valid users = @${SecondPar}" >> /etc/samba/share/${ShareName}
		else
		    sed -i "s/${existingValid}//" /etc/samba/share/${ShareName}
		    printf "${existingValid} @${SecondPar}" >> /etc/samba/share/${ShareName}
		fi
		unset existingValid
	    fi

	fi

	printf "\nDo you want the ${FirstPar} to have the read permission? (y/n)\n"
	Reset=1
	while [ "${Reset}" == 1 ]; do
	    read -p ">" Read
	    if [ "${Read}" == y ]; then 
		Reset=0
		Permission="r"
	    elif [ "${Read}" == n ]; then
		Reset=0
		Permission="-"
	    else
		printf "Must enter y or n\n"
	    fi
	done

	printf "\nDo you want the ${FirstPar} to have the the write permission? (y/n)\n"
	Reset=1
	while [ "${Reset}" == 1 ]; do
	    read -p ">" Write
	    if [ "${Write}" == y ]; then 
		Reset=0
		Permission="${Permission}w"
	    elif [ "${Write}" == n ]; then
		Reset=0
		Permission="${Permission}-"
	    else
		printf "Must enter y or n\n"
	    fi
	done

	printf "\nDo you want the ${FirstPar} to have the the execute permission? (y/n)\n"
	Reset=1
	while [ "${Reset}" == 1 ]; do
	    read -p ">" Execute
	    if [ "${Execute}" == y ]; then 
		Reset=0
		Permission="${Permission}x"
	    elif [ "${Execute}" == n ]; then
		Reset=0
		Permission="${Permission}-"
	    else
		printf "Must enter y or n\n"
	    fi
	done

	if [ "${SambaSetup}" == 2 ]; then
	    SecondPar="\\${SecondPar}"
	fi
	setfacl -m "${FirstPar}":"${DomainName}${SecondPar}":"${Permission}" "${FolderPath}"

	printf "Do you want to add permissions for another group or a user? (y/n)\n"
	Reset=1
	while [ "${Reset}" == 1 ]; do
	    read -p ">" ContinuePermission
	    if [ "${ContinuePermission}" == y ]; then 
		Reset=0
		AddPerm=y
	    elif [ "${ContinuePermission}" == n ]; then
		Reset=0
		AddPerm=n
	    else
		printf "Must enter y or n\n"
	    fi
	done
    done


else
    echo "Script must be run as root"
fi

exit 0