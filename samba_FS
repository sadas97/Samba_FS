#!/bin/bash

#Checking if script is run as root
if [ "$EUID" == 0 ]; then

#Choosing how to configure samba
    printf "Choose your configuration\n1 - Configure as a Standalone File Server\n"\
"2 - Configure as Domain Member\n"
#Asking user for input. If he inserts anything other than the choices presented he is asked
#again
    Reset=1
    while [ "${Reset}" == 1 ]; do
	read -p ">" ConfigChoice
	if [ "${ConfigChoice}" == 1 ] || [ "${ConfigChoice}" == 2 ]; then
	    Reset=0
	else
	    printf "Must enter 1 or 2\n"
	fi
    done


#Setup logging
    printf "Set the logging options\n"
    printf 'Enter the log file (leave empty to set default - /var/log/samba/%%m.log)\n'
    #Aks for user input, if the input is empty it is set to pre-determined value
    read -p ">" LogFile
    if [ -z ${LogFile} ]; then
	LogFile=/var/log/samba/%m.log
    fi

    printf "Enter the log level (leave empty to set default - 1)\n"
    read -p ">" LogLevel
    if [ -z ${LogLevel} ]; then
	LogLevel=1
    fi


#If user chooses the first option
    if [ "${ConfigChoice}" == 1 ]; then
#System installs samba and its dependencies
	apt install samba

	#Find logging parameters and replace their lines
	sed -i "/log file =.*/c\	log file = $LogFile	log level = $LogLevel" /etc/samba/smb.conf

	printf "To access shares you must create users in samba using: smbpasswd -a 'username'"

#If user chooses the second option
    elif [ "${ConfigChoice}" == 2 ]; then

#Asking user to input the kerberos realm. If the input is empty user is asked again
	printf "Enter the kerberos realm\n"
	while [ -z "${KerberosRealm}" ]; do
	    read -p ">" KerberosRealm
	    if [ -z "${KerberosRealm}" ]; then
		printf "The kerberos realm must not be empty\n"
	    fi
	done

#Asking user to input the IP of the main DC. If the input is empty user is asked again
	printf "Enter the IP of the primary DC\n"
	while [ -z "${PDCIP}" ]; do
	    read -p ">" PDCIP
	    if [ -z "${PDCIP}" ]; then
		printf "The IP if the primary DC must not be empty\n"
	    fi
	done

#The system non-interactively installs samba its dependencies
	DEBIAN_FRONTEND=noninteractive apt -yq install acl attr samba samba-dsdb-modules samba-vfs-modules winbind libpam-winbind libnss-winbind libpam-krb5 krb5-config krb5-user dnsutils resolvconf

#The needed values are into nameservers variable
	nameservers="nameserver ${PDCIP}\nsearch ${KerberosRealm^^}\n"
#If the needed values are already in the file they are removed to avoid having two of the same
	sed -i "s/nameserver ${PDCIP}//g" /etc/resolvconf/resolv.conf.d/head
	sed -i "s/search ${KerberosRealm^^}//g" /etc/resolvconf/resolv.conf.d/head
#Find other static nameserver records and save to to nameservers variable so they are not deleted
	nameservers="${nameservers}$(cat /etc/resolvconf/resolv.conf.d/head | grep -w nameserver)\n"
#Print the nameservers variable to resolvconf
	printf "${nameservers}" > /etc/resolvconf/resolv.conf.d/head
	systemctl restart resolvconf

#Configure krb5
	printf "[libdefaults]\ndefault_realm = ${KerberosRealm^^}\ndns_lookup_realm = false\ndns_lookup_kdc = true" > /etc/krb5.conf

#Make a backup of the original smb.conf file
	cp /etc/samba/smb.conf /etc/samba/smb.conf.bckp
#Replace the smb.conf file with the scripts pre-written smb.conf
	cp ./.smb.conf /etc/samba/smb.conf
#Reload the smb configuration
	smbcontrol all reload-config

#Join the machine into the domain
	net ads join -U administrator

#Find the passwd line and the group line in nsswitch.conf file and add 'winbind' to them
	passwdline=$(cat /etc/nsswitch.conf | grep -w passwd)
	groupline=$(cat /etc/nsswitch.conf | grep -w group)
	passwdlinenew="${passwdline} winbind"
	grouplinenew="${groupline} winbind"

#Replace the original lines with the lines containing winbind
	sed -i "s/${passwdline}/${passwdlinenew}/" /etc/nsswitch.conf
	sed -i "s/${groupline}/${grouplinenew}/" /etc/nsswitch.conf

#Find logging parameters and replace their lines
	sed -i "/log file =.*/c\	log file = $LogFile" /etc/samba/smb.conf
	sed -i "/log level =.*/c\	log level = $LogLevel" /etc/samba/smb.conf

#Restart smbd, nmbd and winbind processes
	systemctl restart smbd nmbd winbind

    fi


else

    printf "This script must be run as root"

fi

exit 0
