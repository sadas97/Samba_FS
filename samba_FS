#!/bin/bash

#Checking if script is run as root
if [ "$EUID" == 0 ]; then

#Create a log file
    touch /var/log/samba_FS.log
    
#Confirming that conditions needed for the correct funtioning of the script are met
    printf "\nBefore you run this script make sure\n- No Samba processes are running"\
"\n- You have set a static IP adresses for this machine\nIf you're configuring a domain member:"\
"Â¨n- Your machine correctly resolves fully-qualified domain name and short hostname (in /etc/hosts)\n"\
"\n- Machine has synchronised time using NTP"

printf "Are these conditions met? y/n\n"
    ConfirmReset=1
    while [ "${ConfirmReset}" == 1 ]; do
	if [ -z "${ConfirmMessage}" ]; then
	    ConfirmMessage=1
	elif [ "${ConfirmMessage}" ]; then
	    printf "\nMust enter y or n\n"
	fi

	read -p ">" ConfirmChoice

	if [ "${ConfirmChoice}" == y ] || [ "${ConfirmChoice}" == n ]; then 
	    ConfirmReset=0
	fi
    done

#End script if user chooses 'no'
    if [ "${ConfirmChoice}" == n ]; then
	printf "After you finish these steps run the script again\n"
	printf "$(date '+%d/%m/%Y %H:%M:%S') Script terminated (Starting conditions not met)\n" >> /var/log/samba_FS.log
	exit 0
    fi

#Choosing how to configure samba
    printf "Choose your configuration\n1 - Configure as a Standalone Samba server\n"\
"2 - Configure as Domain Member\n"
#Asking user for input. If he inserts anything other than the choices presented he is asked
#again
    Reset=1
    while [ "${Reset}" == 1 ]; do
	read -p ">" ConfigChoice
	if [ "${ConfigChoice}" == 1 ] || [ "${ConfigChoice}" == 2 ]; then
	    Reset=0
	else
	    printf "\nMust enter 1 or 2\n"
	fi
    done


#Setup logging
    printf "Set the logging options\n"
    printf 'Enter the log file (leave empty to set default - /var/log/samba/%%m.log)\n'
    #Aks for user input, if the input is empty it is set to pre-determined value
    read -p ">" LogFile
    if [ -z ${LogFile} ]; then
	LogFile=/var/log/samba/%m.log
    fi

    printf "Enter the log level (leave empty to set default - 1)\n"
    read -p ">" LogLevel
    if [ -z ${LogLevel} ]; then
	LogLevel=1
    fi


#If user chooses the first option
    if [ "${ConfigChoice}" == 1 ]; then
	printf "$(date '+%d/%m/%Y %H:%M:%S') Configuring standalone Samba\n" >> /var/log/samba_FS.log

#System installs samba and its dependencies
	apt install acl attr samba samba-dsdb-modules samba-vfs-modules
	printf "$(date '+%d/%m/%Y %H:%M:%S') Packages installed\n" >> /var/log/samba_FS.log

	#Find logging parameters and replace their lines
	sed -i "/log file =.*/c\   log file = $LogFile\n   log level = $LogLevel" /etc/samba/smb.conf

	printf "To access shares you must add users to samba using: smbpasswd -a 'username'\n"
	printf "Run samba_share script to create a new share\n"
#Configuring a domain member
    elif [ "${ConfigChoice}" == 2 ]; then
	printf "$(date '+%d/%m/%Y %H:%M:%S') Configuring domain member\n" >> /var/log/samba_FS.log
        #NetBios domain name
        printf "Enter the NetBios domain name (In example.com -> EXAMPLE)\n"
        while [ -z "${DomainName}" ]; do
	    if [ -z "${DNMessage}" ]; then
	        DNMessage=1
	    elif [ "${DNMessage}" ]; then
	        printf "\nDomain name must be filled\n"
	    fi
	    read -p ">" DomainName
        done

	#Kerberos realm
	printf "Enter the kerberos realm\n"
	while [ -z "${KerberosRealm}" ]; do
	    read -p ">" KerberosRealm
	    if [ -z "${KerberosRealm}" ]; then
		printf "\nThe kerberos realm must not be empty\n"
	    fi
	done

	#IP of the main DC
	printf "Enter the IP of the primary DC\n"
	while [ -z "${PDCIP}" ]; do
	    read -p ">" PDCIP
	    if [ -z "${PDCIP}" ]; then
		printf "\nThe IP if the primary DC must not be empty\n"
	    fi
	done

#Non-interactively install samba and its dependencies
	DEBIAN_FRONTEND=noninteractive apt -yq install acl attr samba samba-dsdb-modules samba-vfs-modules winbind libpam-winbind libnss-winbind libpam-krb5 krb5-config krb5-user dnsutils resolvconf
	printf "$(date '+%d/%m/%Y %H:%M:%S') Packages installed\n" >> /var/log/samba_FS.log
#Configure resolvconf
	nameservers="nameserver ${PDCIP}\nsearch ${KerberosRealm^^}\n"
	sed -i "s/nameserver ${PDCIP}//g" /etc/resolvconf/resolv.conf.d/head
	sed -i "s/search ${KerberosRealm^^}//g" /etc/resolvconf/resolv.conf.d/head
	nameservers="${nameservers}$(cat /etc/resolvconf/resolv.conf.d/head | grep -w nameserver)\n"
	printf "${nameservers}" > /etc/resolvconf/resolv.conf.d/head
	systemctl restart resolvconf
	printf "$(date '+%d/%m/%Y %H:%M:%S') Resolvconf configured\n" >> /var/log/samba_FS.log

#Configure krb5
	printf "[libdefaults]\ndefault_realm = ${KerberosRealm^^}\ndns_lookup_realm = false\ndns_lookup_kdc = true" > /etc/krb5.conf

#Make a backup of the original smb.conf file
	mkdir -p /etc/sambaBckp/
	mv -f /etc/samba/smb.conf /etc/sambaBckp/smb.conf.bckp
#Replace the smb.conf file with the scripts pre-written smb.conf
	cp -f $(dirname $0)/.smb.conf /etc/samba/smb.conf

	sed -i "s/KrbRealm/${KerberosRealm^^}/g" /etc/samba/smb.conf
	sed -i "s/NetBIOSdomain/${DomainName^^}/g" /etc/samba/smb.conf
	printf "$(date '+%d/%m/%Y %H:%M:%S') Original Samba configuration file has been replaced and moved to /etc/sambaBckp/\n" >> /var/log/samba_FS.log

#Reload the samba configuration
	smbcontrol all reload-config

#Join the machine into the domain
	net ads join -U administrator
	printf "$(date '+%d/%m/%Y %H:%M:%S') Samba has joined into the domain\n" >> /var/log/samba_FS.log
#Find the passwd line and the group line in nsswitch.conf file and add 'winbind' to them
	passwdline=$(cat /etc/nsswitch.conf | grep -w passwd)
	groupline=$(cat /etc/nsswitch.conf | grep -w group)
	passwdlinenew="${passwdline} winbind"
	grouplinenew="${groupline} winbind"
	

#Replace the original lines with the lines containing winbind
	sed -i "s/${passwdline}/${passwdlinenew}/" /etc/nsswitch.conf
	sed -i "s/${groupline}/${grouplinenew}/" /etc/nsswitch.conf
	printf "$(date '+%d/%m/%Y %H:%M:%S') Nsswitch configured\n" >> /var/log/samba_FS.log

#Find logging parameters and replace their lines
	sed -i "/log file =.*/c\    log file = $LogFile" /etc/samba/smb.conf
	sed -i "/log level =.*/c\    log level = $LogLevel" /etc/samba/smb.conf

#Restart smbd, nmbd and winbind processes
	systemctl restart smbd nmbd winbind

    fi

else

    printf "This script must be run as root"

fi

exit 0
